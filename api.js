(function(window) {
  "use strict";

  /**
   * User object that logs into the remote service.
   * @param object userData
   *   The data of the user to create.
   *
   * @param function callback
   *   The callback function to call once the user has been initialized.
   */
  var User = window.User = function ( userData, callback ) {

    /**
     * Private variables.
     */

    // Hold the reference to this.
    var _this = this;

    // The base URL for the API.
    var apiBase = 'http://vagrant.ld';

    // The salt generated by genSalt.
    var salt = null;

    // Stores passwords to be hashed.
    var passwords = userData.passwords || {};

    // Reference to bcrypt library.
    var bcrypt = dcodeIO.bcrypt;

    // Stores hashed passwords.
    var hashes = {};

    console.log(passwords);

    /**
     * Seeds the ISAAC CSPRNG.
     */
    function seedISAAC () {

      // The number of seed characters to use as a seed for ISAAC.
      var seedLen = 512;

      return $.Deferred(function ( d ) {

        $.get(apiBase + '/random/' + seedLen, {}, function() {

          // Seed ISAAC with the random bytes collected.
          isaac.seed(arguments[0]);

          // Run a random number once before use.
          isaac.random();

          d.resolve();

        });

      }).promise();

    }



    /**
     * Regenerates all password hashes.
     *
     * Overwrites any previously generated hashes.
     */
    _this.genHashes = function genHashes () {

      // Number of rounds to salt each hash.
      var saltRounds = 10;

      // Array to hold our deferred objects.
      var d = [];

      // Loop over the passwords...
      for (var p in passwords) {
        console.log(passwords[p]);

        // Create a deferred object.
        d[p] = new $.Deferred();

        hashes[p] = bcrypt.hash(passwords[p], saltRounds, function (err, hash) {
          hashes[p] = hash;
          console.log(hash);

          // Resolve this object.
          d[p].resolve();

        });
      }

      var promises = [];
      for (var i in d) {
        promises[i] = d[i].promise();
      }
      console.log(promises);
      $.when.apply($, promises).done(function () {
        console.log('wot');
        console.log(hashes);
      });
    };

    /**
     * Generates a salt for use in bcrypt.
     */
    function genBcryptSalt() {

      var saltRounds = 10;

      return $.Deferred(function ( d ) {

        dcodeIO.bcrypt.genSalt(saltRounds, function(err, salt) {

          _this.salt = salt;

          d.resolve();

        });

      }).promise();

    }

    $.when(seedISAAC()).done(function () {

      // An implementation detail of the bcrypt library - it needs a fallback
      // CSPRNG.
      bcrypt.setRandomFallback(isaac.random);

      _this.genHashes();
    });

    // $.when(seedISAAC()).done(function () {

    //   dcodeIO.bcrypt.setRandomFallback(isaac.random);

    //   $.when(genBcryptSalt()).done(function() {
    //     callback();
    //   });

    // });

  };

})(window);
