(function(window) {
  "use strict";

  /**
   * User object that logs into the remote service.
   * @param object userData
   *   The data of the user to create.
   *
   * @param function callback
   *   The callback function to call once the user has been initialized.
   */
  var User = window.User = function ( userData, callback ) {

    /**
     * Private variables.
     */

    // Hold the reference to this.
    var _this = this;

    // The base URL for the API.
    var apiBase = 'http://vagrant.ld';

    // The salt generated by genSalt.
    var salt = null;

    // Stores passwords to be hashed.
    var passwords = userData.passwords || {};

    // Reference to bcrypt library.
    var bcrypt = dcodeIO.bcrypt;

    // Stores hashed passwords.
    var hashes = {};

    /**
     * Seeds the ISAAC CSPRNG.
     */
    function seedISAAC () {

      // The number of seed characters to use as a seed for ISAAC.
      var seedLen = 512;

      return $.Deferred(function ( d ) {
        console.log('async');
        $.get(apiBase + '/random/' + seedLen, {}, function() {

          // Seed ISAAC with the random bytes collected.
          isaac.seed(arguments[0]);

          // Run a random number once before use.
          isaac.random();

          // Allow bcrypt to use ISAAC for random number generation.
          bcrypt.setRandomFallback(isaac.random);

          d.resolve();

        });

      }).promise();

    }

    /**
     * Regenerate a single password hash.
     */
    function genHash( passwordKey ) {
      var saltRounds = 8;

      return $.Deferred(function (d) {
        bcrypt.hash(passwords[passwordKey], saltRounds, function ( err, hash ) {
          console.log(hash);
          hashes[passwordKey] = hash;

          d.resolve();

        }, function ( progress ) {
          console.log(progress);
        });
      }).promise();
    }

    /**
     * Regenerates all password hashes.
     *
     * Overwrites any previously generated hashes.
     */
    _this.genHashes = function genHashes ( callback ) {

      // Array to hold our deferred objects.
      var d = [];

      // Array to store the promises of generated hashes.
      var promises = [];

      // // Loop over the passwords...
      for (var p in passwords) {
        promises.push(genHash(p));
      }

      $.when.apply($, promises).done(function () {
        if (callback){
          callback();
        }
      });
    };

    /**
     * Get the public user data.
     */
    _this.data = function data () {
      return {
        'hashes': hashes
      };
    };

    $.when(seedISAAC()).done(function () {
      _this.genHashes();
    });

  };

})(window);
